
edick007_Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000993  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000873  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000319  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	53 d0       	rcall	.+166    	; 0x15a <main>
  b4:	92 c0       	rjmp	.+292    	; 0x1da <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_Init>:
	}
}

void USART_Flush(){
	static unsigned char dummy;
	while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
  b8:	e1 ec       	ldi	r30, 0xC1	; 193
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	20 81       	ld	r18, Z
  be:	28 61       	ori	r18, 0x18	; 24
  c0:	20 83       	st	Z, r18
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	20 81       	ld	r18, Z
  c8:	22 60       	ori	r18, 0x02	; 2
  ca:	20 83       	st	Z, r18
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	9c 01       	movw	r18, r24
  e2:	ad 01       	movw	r20, r26
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	44 1f       	adc	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	44 1f       	adc	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	72 e1       	ldi	r23, 0x12	; 18
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	4c d0       	rcall	.+152    	; 0x196 <__udivmodsi4>
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	82 0f       	add	r24, r18
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 106:	da 01       	movw	r26, r20
 108:	c9 01       	movw	r24, r18
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	89 2f       	mov	r24, r25
 112:	9a 2f       	mov	r25, r26
 114:	ab 2f       	mov	r26, r27
 116:	bb 27       	eor	r27, r27
 118:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 11c:	08 95       	ret

0000011e <USART_RxChar>:
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <USART_RxChar+0x4>
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12c:	08 95       	ret

0000012e <USART_TxChar>:
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	95 ff       	sbrs	r25, 5
 136:	fd cf       	rjmp	.-6      	; 0x132 <USART_TxChar+0x4>
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13c:	08 95       	ret

0000013e <USART_SendString>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
 144:	88 81       	ld	r24, Y
 146:	88 23       	and	r24, r24
 148:	29 f0       	breq	.+10     	; 0x154 <USART_SendString+0x16>
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	f0 df       	rcall	.-32     	; 0x12e <USART_TxChar>
 14e:	89 91       	ld	r24, Y+
 150:	81 11       	cpse	r24, r1
 152:	fc cf       	rjmp	.-8      	; 0x14c <USART_SendString+0xe>
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <main>:
}

int main(void)
{
	char Data_in;
    DDRB = 0xff;							/* make PORT as output port */
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 b9       	out	0x04, r24	; 4
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
 15e:	60 e8       	ldi	r22, 0x80	; 128
 160:	75 e2       	ldi	r23, 0x25	; 37
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a8 df       	rcall	.-176    	; 0xb8 <USART_Init>
	LED = 0;
 168:	15 b8       	out	0x05, r1	; 5
	
	while(1)
	{

		Data_in = USART_RxChar();						/* receive data from Bluetooth device*/
 16a:	c1 e0       	ldi	r28, 0x01	; 1
 16c:	d8 df       	rcall	.-80     	; 0x11e <USART_RxChar>
		if(Data_in =='1')
 16e:	81 33       	cpi	r24, 0x31	; 49
 170:	39 f4       	brne	.+14     	; 0x180 <main+0x26>
		{
			LED = 1;							/* Turn ON LED */
 172:	c5 b9       	out	0x05, r28	; 5
			USART_SendString("LED_ON");					/* send status of LED i.e. LED ON */
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	91 e0       	ldi	r25, 0x01	; 1
			USART_TxChar(5);
 178:	e2 df       	rcall	.-60     	; 0x13e <USART_SendString>
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	d8 df       	rcall	.-80     	; 0x12e <USART_TxChar>
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <main+0x12>
			
		}
		else if(Data_in =='2')
 180:	82 33       	cpi	r24, 0x32	; 50
		{
			LED = 0;							/* Turn OFF LED */
 182:	29 f4       	brne	.+10     	; 0x18e <main+0x34>
			USART_SendString("LED_OFF"); 				/* send status of LED i.e. LED OFF */
 184:	15 b8       	out	0x05, r1	; 5
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	d9 df       	rcall	.-78     	; 0x13e <USART_SendString>
		}
		else
			USART_SendString("Enter a correct Command");	/* send message for selecting proper option */
 18c:	ef cf       	rjmp	.-34     	; 0x16c <main+0x12>
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	d5 df       	rcall	.-86     	; 0x13e <USART_SendString>
 194:	eb cf       	rjmp	.-42     	; 0x16c <main+0x12>

00000196 <__udivmodsi4>:
 196:	a1 e2       	ldi	r26, 0x21	; 33
 198:	1a 2e       	mov	r1, r26
 19a:	aa 1b       	sub	r26, r26
 19c:	bb 1b       	sub	r27, r27
 19e:	fd 01       	movw	r30, r26
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <__udivmodsi4_ep>

000001a2 <__udivmodsi4_loop>:
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	ee 1f       	adc	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	a2 17       	cp	r26, r18
 1ac:	b3 07       	cpc	r27, r19
 1ae:	e4 07       	cpc	r30, r20
 1b0:	f5 07       	cpc	r31, r21
 1b2:	20 f0       	brcs	.+8      	; 0x1bc <__udivmodsi4_ep>
 1b4:	a2 1b       	sub	r26, r18
 1b6:	b3 0b       	sbc	r27, r19
 1b8:	e4 0b       	sbc	r30, r20
 1ba:	f5 0b       	sbc	r31, r21

000001bc <__udivmodsi4_ep>:
 1bc:	66 1f       	adc	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	1a 94       	dec	r1
 1c6:	69 f7       	brne	.-38     	; 0x1a2 <__udivmodsi4_loop>
 1c8:	60 95       	com	r22
 1ca:	70 95       	com	r23
 1cc:	80 95       	com	r24
 1ce:	90 95       	com	r25
 1d0:	9b 01       	movw	r18, r22
 1d2:	ac 01       	movw	r20, r24
 1d4:	bd 01       	movw	r22, r26
 1d6:	cf 01       	movw	r24, r30
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
