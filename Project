/*
 * 122aProjectDraft.c
 *
 * Created: 11/26/2018 9:45:56 PM
 * Author : Ed D
 * Time to put the individual complexities together
 -----------	High Priority SMs----------------------------------------
 *   1) create a SM that utilizes the gyro functions that will set a flag for BalenceForward, and BalenceBackward This will be used to let the stepper SM know which way to correct
 *	 2) create a SM utilizing the stepper functions that will keep the robud upright from the previous SM
------------	Lower Priority SMs   ------------------------------------
 *   3) create a SM that takes in the blue tooth for commands
 *	 4) create a SM that turns on the EM when user inputs correct command 5.
 *	 5) done
 */ 

#define F_CPU 8000000UL	
#include <avr/io.h>
#include <util/delay.h>
#include <math.h>
#include <inttypes.h>
#include <stdlib.h>
#include <stdio.h>

// headers for gyro
#define ACCEL_XOUT_H 0x3B
#define ACCEL_XOUT_L 0x3C
#define CONFIG 0x1A
#define GYRO_CONFIG 0x1B
#define INT_ENABLE 0x38
#define PWR_MGMT_1 0x6B
#define SMPLRT_DIV 0x19

	#define Forward 1
	#define Backward 2//
	#define Stay 0


#define BAUD_PRESCALE (((F_CPU / (BAUDRATE * 16UL))) - 1)	

//I2c Headers AND FUNCTION ***********************************************************************************

#define SCL_CLK 100000L							/* Define SCL clock frequency */
#define BITRATE(TWSR)	((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))) /* Define bit rate */

void I2C_Init();
uint8_t  I2C_GO(char);
uint8_t  I2C_Repeated_Start(char);
void I2C_Stop();
void I2C_GO_Wait(char);
uint8_t  I2C_Write(char);
char I2C_Read_Ack();
char I2C_Read_Nack();

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
}


uint8_t I2C_GO(char slave_write_address)						/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					//set interupts flag
	while (!(TWCR & (1<<TWINT)));							/// wait until is interrupt set
	status = TWSR & 0xF8;									// read TWI status
	if (status != 0x08)										// is it a success
	return 0;												//return if fail
	TWDR = slave_write_address;								//write to register of folowwer
	TWCR = (1<<TWEN)|(1<<TWINT);							//clear  interrupt flag
	while (!(TWCR & (1<<TWINT)));							// wait until cleared
	status = TWSR & 0xF8;									//read lower adress  (bottum bits)
	if (status == 0x18)
	return 1;
	if (status == 0x20)
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}



void I2C_Stop()
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					// Enable TWI, generate stop condition and clear interrupt flag
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
}
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				//enable interrupts
		while (!(TWCR & (1<<TWINT)));						//wait
		status = TWSR & 0xF8;								//read twi reg (lower base)
		if (status != 0x08)									//if  status holds then tranfer succeeded
		continue;											//jump to loop
		TWDR = slave_write_address;							//write to slave
		TWCR = (1<<TWEN)|(1<<TWINT);						//shift out bits
		while (!(TWCR & (1<<TWINT)));						//wait
		status = TWSR & 0xF8;								//cheack status of register
		if (status != 0x18 )								//check if recieved
		{
			I2C_Stop();										// looop until it works!
			continue;
		}
		break;												// If yes then break loop
	}
}


uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											//inouts
	TWDR = data;											//set inputs to twi output reg
	TWCR = (1<<TWEN)|(1<<TWINT);							//set interrupts
	while (!(TWCR & (1<<TWINT)));							//wait
	status = TWSR & 0xF8;
	if (status == 0x28)
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												//mission failed
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
	return TWDR;											/* Return received data */
}

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
	return TWDR;											/* Return received data */
}

//END END END I2c Headers AND FUNCTION *****************

void USART_Init(unsigned long);
char USART_RxChar();
void USART_TxChar(char);
void USART_SendString(char*);

void USART_Init(unsigned long BAUDRATE)				// USART initialize function
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);				//Enable USART T register and Recieve Register
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ10);	
	UBRR0L = BAUD_PRESCALE;								//Set lower bit prescale values
	UBRR0H = (BAUD_PRESCALE >> 8);					//set the upper bit prescale values
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */
}

void USART_TxChar(char data)						/* Data transmitting function */
{
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
	UDR0 = data;										/* Write data to be transmitting in UDR */
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}

char USART_Flush(){
	static unsigned char dummy;
	while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
}


char Get_Data(){
	return(UDR0);
}

// ***** END USART FUNCTS***************************************************


//______START MOTOR FUNTS_____________________
unsigned char Motor1 = 0;
const int con = 85;

void M1step1() {
	PORTA  = 5;
	_delay_us(con);
	
}
void M1step2() {
	PORTA = 6;
	_delay_us(con);//
}
void M1step3() {
	PORTA = 10;
	_delay_us(con);
}
void M1step4() {
	PORTA = 9;
	_delay_us(con);
}
void M1stopMotor() {
	PORTA = 0;
}

void M1halfstep1() {
	PORTA  = 1;
	_delay_us(con);
	
}
void M1halfstep2() {
	PORTA = 5;
	_delay_us(con);//
}
void M1halfstep3() {
	PORTA = 4;
	_delay_us(con);
}
void M1halfstep4() {
	PORTA = 6;
	_delay_us(con);
}


void M1halfstep5() {
	PORTA  = 2;
	_delay_us(con);
	
}
void M1halfstep6() {
	PORTA = 10;
	_delay_us(con);//
}
void M1halfstep7() {
	PORTA = 8;
	_delay_us(con);
}
void M1halfstep8() {
	PORTA = 9;
	_delay_us(con);
}



void M2step1() {
	PORTB = 6;
	_delay_us(con);
	
}
void M2step2() {
	PORTB = 10;
	_delay_us(con);
}
void M2step3() {
	PORTB = 9;
	_delay_us(con);
}
void M2step4() {
	PORTB = 5;
	_delay_us(con);
}
void M2stopMotor() {
	PORTB = 0;
}



void M2halfstep1() {
	PORTB  = 1;
	_delay_us(con);
	
}
void M2halfstep2() {
	PORTB = 5;
	_delay_us(con);//
}
void M2halfstep3() {
	PORTB = 4;
	_delay_us(con);
}
void M2halfstep4() {
	PORTB = 6;
	_delay_us(con);
}


void M2halfstep5() {
	PORTB  = 2;
	_delay_us(con);
	
}
void M2halfstep6() {
	PORTB = 10;
	_delay_us(con);//
}
void M2halfstep7() {
	PORTB = 8;
	_delay_us(con);
}
void M2halfstep8() {
	PORTB = 9;
	_delay_us(con);
}

void M1OnForwardhalf(){
	M1halfstep1();
	M1halfstep2();
	M1halfstep3();
	M1halfstep4();
	M1halfstep5();
	M1halfstep6();
	M1halfstep7();
	M1halfstep8();
}

void M1OnReversehalf(){
	M1halfstep8();
	M1halfstep7();
	M1halfstep6();
	M1halfstep5();
	M1halfstep4();
	M1halfstep3();
	M1halfstep2();
	M1halfstep1();
}


void M2OnForwardhalf(){
	M2halfstep1();
	M2halfstep2();
	M2halfstep3();
	M2halfstep4();
	M2halfstep5();
	M2halfstep6();
	M2halfstep7();
	M2halfstep8();
}

void M2OnReversehalf(){
	M2halfstep8();
	M2halfstep7();
	M2halfstep6();
	M2halfstep5();
	M2halfstep4();
	M2halfstep3();
	M2halfstep2();
	M2halfstep1();

}

void M1OnForward(){
	M1step1();
	M1step2();
	M1step3();
	M1step4();
}

void M1OnReverse(){
	M1step4();
	M1step3();
	M1step2();
	M1step1();
}

void M2OnForward(){
	M2step1();
	M2step2();
	M2step3();
	M2step4();
}

void M2OnReverse(){
	M2step4();
	M2step3();
	M2step2();
	M2step1();
}

void GoForward(){
	M2step1(); M1step1();
	M2step2(); M1step2();
	M2step3(); M1step3();
	M2step4(); M1step4();
}

void GoBackward(){
	M2step4(); M1step4();
	M2step3(); M1step3();
	M2step2(); M1step2();
	M2step1(); M1step1();
}
unsigned char tik2 = 0;
void TurnRight(){
	switch(tik2){
		case 0:
		M2step4(); M1step1();
		tik2++;
		break;
		
		case 1:
		M2step3(); M1step2();
		tik2++;
		break;
		
		case 2:
		M2step2(); M1step3();
		tik2++;
		break;
		
		case 3:
		M2step1(); M1step4();
		tik2 = 0;
		break;
		default:
		tik2 = 0;
		break;
	}
}

unsigned char tik4 = 0;
void TurnLeft(){

	switch(tik4){
		case 0:
		M1step4(); M2step1();
		tik4++;
		break;
		case 1:
		M1step3(); M2step2();
		tik4++;
		break;
		case 2:
		M1step2(); M2step3();
		tik4++;
		break;
		case 3:
		M1step1(); M2step4();
		tik4 = 0;
		break;
		
		default:
		tik4 = 0;
		break;
	}
	
}

unsigned char tik5 =0;




void GoForwardhalf(){
	switch(tik5){
		case 0:
		M1halfstep1(); 	M2halfstep1();
		tik5++;
		break;
		
		case 1:
		M1halfstep2();  M2halfstep2();
		tik5++;
		break;
		
		case 2:
		M1halfstep3();  M2halfstep3();
		tik5++;
		break;
		
		case 3:
		M2halfstep4();  M1halfstep4();
		tik5++;
		break;
		
		case 4:
		M2halfstep5();  M1halfstep5();
		tik5++;
		break;
		
		case 5:
		M2halfstep6();  M1halfstep6();
		tik5++;
		break;
		
		case 6:
		M2halfstep7();  M1halfstep7();
		tik5++;
		break;
		
		case 7:
		M2halfstep8();  M1halfstep8();
		tik5 = 0;
		break;
		
		default:
		tik5 = 0;
		break;
	}
}

unsigned char tik8 = 0;
void GoBackwardhalf(){
	switch(tik8){
		case 0:
		M1halfstep8();  M2halfstep8();
		tik8++;
		break;
		case 1:
		tik8++;
		M1halfstep7();  M2halfstep7();
		break;
		case 2:
		tik8++;
		M1halfstep6();  M2halfstep6();
		break;
		case 3:
		tik8++;
		M1halfstep5();  M2halfstep5();
		break;
		case 4:
		tik8++;
		M1halfstep4();  M2halfstep4();
		break;
		case 5:
		tik8++;
		M1halfstep3();  M2halfstep3();
		break;
		case 6:
		tik8++;
		M1halfstep2();  M2halfstep2();
		break;
		case 7:
		tik8 = 0;
		M1halfstep1();  M2halfstep1();
		break;
		default:
		tik8 = 0;
		break;
	}
}

unsigned char tik = 0;
void TurnRighthalf(){
	
	switch(tik){
		case 0:
		M1halfstep8();  M2halfstep1();
		tik++;
		break;
		case 1:
		M1halfstep7();  M2halfstep2();
		tik++;
		break;
		case 2:
		M1halfstep6();  M2halfstep3();
		tik++;
		break;
		case 3:
		M1halfstep5();  M2halfstep4();
		tik++;
		break;
		case 4:
		M1halfstep4();  M2halfstep5();
		tik++;
		break;
		case 5:
		M1halfstep3();  M2halfstep6();
		tik++;
		break;
		case 6:
		M1halfstep2();  M2halfstep7();
		tik++;
		break;
		case 7:
		M1halfstep1();  M2halfstep8();
		tik = 0;
		break;
		default:
		tik = 0;
		break;
	}

}
unsigned char tikback = 0;
void TurnLefthalf(){
	
	switch(tikback){
		case 0:
		M1halfstep1();  M2halfstep8();
		tikback++;
		break;
		case 1:
		M1halfstep2();  M2halfstep7();
		tikback++;
		break;
		case 2:
		M1halfstep3();  M2halfstep6();
		tikback++;
		break;
		case 3:
		M1halfstep4();  M2halfstep5();
		tikback++;
		break;
		case 4:
		M1halfstep5();  M2halfstep4();
		tikback++;
		break;
		case 5:
		M1halfstep6();  M2halfstep3();
		tikback++;
		break;
		case 6:
		M1halfstep7();  M2halfstep2();
		tikback++;
		break;
		case 7:
		M1halfstep8();  M2halfstep1();
		tikback = 0;
		break;
		default:
		tikback = 0;
		break;
	}


}

void Stop(){
	PORTA = 0;
	PORTB = 0;
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

//______END MOTOR FUNCTS____________________


void Stop(){
	PORTA = 0;
	PORTB = 0;
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}


// end sterpper functs

//** STARTS GRYO FUNCTS *****************************************************************************
float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);
	I2C_GO_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_GO_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_GO_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_GO_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_GO_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}

void MPU_Start_Loc()
{
	I2C_GO_Wait(0xD0);								/* I2C start with device write address */
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());	// either waits for i2c to be ready or runs it!
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	I2C_Stop();
}


//**** END GYRO FUNCTIONS *********************************************88


		/**IIII Timer Fucntion IIII**/
volatile unsigned char TimerFlag = 0; // TimerISR() sets this to 1. C programmer should clear to 0.


// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {

	TCCR1B = 0x0B;// bit3 = 0: CTC mode (clear timer on compare)
	OCR1A = 125;	// Timer interrupt will be generated when TCNT1==OCR1A
	TIMSK1 = 0x02; // bit1: OCIE1A -- enables compare match interrupt
	TCNT1=0;

	_avr_timer_cntcurr = _avr_timer_M;

	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

//		 END timer Function

//----- Start Gyro Scope -----------------------------------------------------
unsigned char balence;		//var for steppers to balence
volatile float Xa=0,Ya=0,Za=0;
volatile unsigned char tot = 0;
unsigned char Balence = 1; // turn balance of=n
	char Data_in;			//data in
enum stable {stable_start, stable_base, read_gyro, send_gyro}stabalize_state;
void stabalize(){
	
	//float Xa,Ya,Za = 0;
	
	switch(stabalize_state){
		case stable_start:
			stabalize_state = stable_base;
		break;
		
		case stable_base:

			stabalize_state = read_gyro;
		break;
		
		case read_gyro:
			stabalize_state = send_gyro;
		break;
		
		case send_gyro:
			stabalize_state = read_gyro;
		break;
		
		default:
			stabalize_state = stable_start;
		break;
	}
	
	switch(stabalize_state){
		case stable_start:
			//do nothing
		break;
		
		case stable_base:
			if (Data_in == 'a')
			{
				Balence = 0;
			}
		break;
		
		case read_gyro:
		
			Read_RawValue();
				
			Xa = Acc_x/16384.0;								/* Divide raw value by sensitivity scale factor to get real values */
			Ya = Acc_y/16384.0;
			Za = Acc_z/16384.0;

			
		break;
		
		case send_gyro:
					
			if (Xa > .1 && Xa < .6)
			{
				balence = Forward;	
			}
			else if (Xa < -.05)
			{
				balence = Backward;
			}
			else {
				balence = Stay;
			}
			
		break;
		
		default:
		stabalize_state = stable_start;
		break;
	}
}
//----- End Gyro Scope -----------------------------------------------------

//------- Start Auto Stepper ----------------------------------------------------

enum Auto {Auto_start, Auto_wait, GoForward, GoBackward}Auto_state;
void AutoStepper(){
	
	switch(Auto_state){
		case Auto_start:
			Auto_state = Auto_wait; 
		break;
		
		case Auto_wait:
			
			if(balence == Forward){
				Auto_state = GoForward;
			}
			else if (balence == Backward)
			{
				Auto_state = GoBackward;
			}
			else{
				Auto_state = Auto_wait;
			}
		break;
		
		case GoForward:
			if(balence == Forward){
				Auto_state = GoForward;
			}
			else if (balence == Backward)
			{
				Auto_state = GoBackward;
			}
			else{
				Auto_state = Auto_wait;
			}
		break;
		
		case GoBackward:
			if(balence == Forward){
				Auto_state = GoForward;
			}
			else if (balence == Backward)
			{
				Auto_state = GoBackward;
			}
			else{
				Auto_state = Auto_wait;
			}
		break;
		
		default:
			Auto_state = Auto_start;
		break;
	}
	
	switch(Auto_state){
		case Auto_start:
			//do nothing
			Stop();
		break;
		
		case Auto_wait:
			// set motors to not move
			Stop();
		break;
		
		case GoForward:
			//move motors forward
			Backward();
		break;
		
		case GoBackward:
			//move motors backward
			Backward();
		break;
		
		default:
		break;
	}
}

//------- End Auto Stepper ----------------------------------------------------

//start Bluetooth
enum Blue {Blue_start, Blue_base, Blue_read, Blue_send} Blue_state;
void Bluetooth(){
	switch (Blue_state){
		case Blue_start:
			Blue_state = Blue_base;
		break;
		
		case Blue_base:
			Blue_state = Blue_read;
		break;
		
		case Blue_read:
			Data_in = UDRO; 
			Blue_state = Blue_send;
		break;
		
		case Blue_send:
			if (Data_in == '1')
			{
				Stop();
			}
			else if (Data_in == '2')
			{
				TurnLefthalf();
			}
			else if(Data_in == '8')
			{
				TurnRighthalf();
			}
			else if(Data_in == '4')
			{
				GoBackwardhalf();
			}
			else if(Data_in == '6')
			{
				GoForwardhalf();
			}
			else if (Data_in == '9'){
				flag = 1;
			}
			else if (Data_in == '5'){
				flag = 0;
			}
			else{
				Stop();
			}
			if (flag == 1){
				PORTD |= 0x40;
			}
			else{
				PORTD = 0;
			}
			Blue_state = Blue_base;
		break;
		
		default:
			Blue_state = Blue_start;
		break;
	}
	
	switch (Blue_state){
		case Blue_start:
			//nothing
		break;
		
		case Blue_base:
			if (Balance = 1)
			{
				Stop();
			}
		break;
		
		case Blue_read:
			//nothing
		break;
		
		case Blue_send:
			if (Stay();)
			{
				dtostrf( Xa, 3, 2, float_ );					/* Take values in buffer to send all parameters over USART */
				sprintf(buffer," Ax = %s g\t",float_);
				USART_SendString(buffer);

				dtostrf( Ya, 3, 2, float_ );
				sprintf(buffer," Ay = %s g\t",float_);
				USART_SendString(buffer);
						
				dtostrf( Za, 3, 2, float_ );
				sprintf(buffer," Az = %s g\t",float_);
				USART_SendString(buffer);
						
				if (ElectricFlag == 1)
				{
					USART_SendString("     EM       ON         ");
				}
				else{
					USART_SendString("     EM       OFF        ");
				}
				i = 0;
			}
		break;
		
		default:
		Blue_state = Blue_start;
		break;
	}
	
}
int main(void)
{
	DDRA = 0xFF; PORTA = 0x00; //output
	DDRB = 0xFF; PORTB = 0x00; //output
	
	I2C_Init();											/* Initialize I2C */
	MPU6050_Init();										/* Initialize MPU6050 */
	USART_Init(9600);						/* initialize USART with 9600 baud rate */


	TimerSet(5);
	TimerOn();
	
	stabalize_state = stable_start;
	Auto_state = Auto_start;
	Blue_state = Blue_start;
	//Electro = Electro_start;
	while (1) {
		stabalize();
		AutoStepper();
		Bluetooth();
		
	//	Bluetooth();
		//ElectroMagnet();
		
		while (!TimerFlag);	// Wait 1 sec
		
		TimerFlag = 0;
		
	}
	
}

